
using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace Question2
{
    public partial class Form1 : Form
    {
        Dictionary<string, string> productionRules = new Dictionary<string, string>();
        Dictionary<string, string> firstSets = new Dictionary<string, string>();

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            productionRules.Clear();
            firstSets.Clear();
            bool flag = true;

            var productionRulesLines = richTextBox1.Text.Split('\n');
            foreach (var productionRule in productionRulesLines)
            {
                var temp = productionRule.Split('>');
                if (!productionRules.ContainsKey(temp[0]))
                {
                    productionRules.Add(temp[0], temp[1]);
                    var firstChar = temp[0][0];
                    if (!char.IsUpper(firstChar))
                    {
                        flag = false;
                        MessageBox.Show("Non-terminals can't be small letters");
                        break; // Exit the loop early on error
                    }
                }
                else
                {
                    productionRules[temp[0]] += "|" + temp[1];
                }
            }

            if (flag)
            {
                foreach (var rule in productionRules)
                {
                    List<string[]> rules = new List<string[]>();
                    var alpha = rule.Value.Split('|');
                    foreach (var rul in alpha)
                    {
                        rules.Add(rul.Split(' '));
                    }
                    foreach (var rul in rules)
                    {
                        if (!firstSets.ContainsKey(rule.Key))
                        {
                            firstSets.Add(rule.Key, CalculateFirst(rul, 0));
                        }
                        else
                        {
                            firstSets[rule.Key] += "," + CalculateFirst(rul, 0);
                        }
                    }
                }

                foreach (var x in firstSets)
                {
                    richTextBox2.AppendText($"First({x.Key}) = {{{x.Value}}}\n");
                }
            }
        }

        private string CalculateFirst(string[] alpha, int index)
        {
            if (!productionRules.ContainsKey(alpha[0]) && alpha[0] != "~")
            {
                return alpha[0];
            }
            else if (alpha[0] != "~" && alpha.Length >= 1)
            {
                string[] beta = null;
                if (productionRules.ContainsKey(alpha[index]))
                {
                    beta = productionRules[alpha[index]].Split(' ');
                }
                else
                {
                    return alpha[index];
                }
                var x = CalculateFirst(beta, index);
                return x != "~" ? x : CalculateFirst(alpha, index + 1);
            }
            return "~";
        }
    }
}
